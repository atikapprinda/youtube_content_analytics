# -*- coding: utf-8 -*-
"""Youtube Content Analytics.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qBatw7LU62xNH05agHWvUOarKoIixY7w

# Load Folder
"""

from google.colab import drive
drive.mount('/content/drive')

import os
default_dir = "/content/drive/MyDrive/Analyst/Youtube Content Analytics"
os.chdir(default_dir)

!ls

"""* **rank:** Position of the YouTube channel based on the number of subscribers
* **Youtuber:** Name of the YouTube channel
* **subscribers:** Number of subscribers to the channel
* **video views:** Total views across all videos on the channel
* **category:** Category or niche of the channel
* **Title:** Title of the YouTube channel
* **uploads:** Total number of videos uploaded on the channel
* **Country:** Country where the YouTube channel originates
* **Abbreviation:** Abbreviation of the country
* **channel_type:** Type of the YouTube channel (e.g., individual, brand)
* **video_views_rank:** Ranking of the channel based on total video views
* **country_rank:** Ranking of the channel based on the number of subscribers within its country
* **channel_type_rank:** Ranking of the channel based on its type (individual or brand)
* **video_views_for_the_last_30_days:** Total video views in the last 30 days
* **lowest_monthly_earnings:** Lowest estimated monthly earnings from the channel
* **highest_monthly_earnings:** Highest estimated monthly earnings from the channel
* **lowest_yearly_earnings:** Lowest estimated yearly earnings from the channel
* **highest_yearly_earnings:** Highest estimated yearly earnings from the channel
* **subscribers_for_last_30_days:** Number of new subscribers gained in the last 30 days
* **created_year:** Year when the YouTube channel was created
* **created_month:** Month when the YouTube channel was created
* **created_date:** Exact date of the YouTube channel's creation
* **Gross tertiary education enrollment (%):** Percentage of the population enrolled in tertiary education in the country
* **Population:** Total population of the country
* **Unemployment rate:** Unemployment rate in the country
* **Urban_population:** Percentage of the population living in urban areas
* **Latitude:** Latitude coordinate of the country's location
* **Longitude:** Longitude coordinate of the country's location

# Import Libraries
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""# Load Dataset"""

df = pd.read_csv('Global YouTube Statistics.csv', encoding='unicode_escape')

df.head()

"""# Checking Dataset"""

df.rename(index=str, columns={
    'Youtuber' : 'youtuber',
    'video views' : 'video_views',
    'Title': 'title',
    'Country': 'country',
    'Abbreviation': 'abbreviation',
    'Gross tertiary education enrollment (%)': 'GTE_enrollment_(%)',
    'Population': 'population',
    'Unemployment rate': 'unemployment_rate',
    'Urban_population': 'urban_population',
    'Latitude': 'latitude',
    'Longitude': 'longitude'
}, inplace=True)

df.info()

df.isnull().sum()

# Cek nilai null di semua kolom
df[df.isnull().any(axis=1)].head()

df.shape

df.drop('subscribers_for_last_30_days', axis=1, inplace=True)

df=df.dropna()

df.isnull().sum()

df.head()

df['country'].unique()

df['country'].nunique()

df.shape

"""# Add Column Rate Viewers Per Channel"""

df['rate_viewers'] = df['video_views']/df['uploads']
df

"""# Indo Section"""

df_indo=df.query("country == 'Indonesia'")
df_indo.head()

fig, ax  = plt.subplots(figsize=(6,3))
ax=sns.countplot(y='channel_type', data=df_indo, palette='viridis_r', order = df_indo['channel_type'].value_counts().index)
ax.set_xticklabels(ax.get_xticklabels(), rotation=80)
ax.bar_label(ax.containers[0])
plt.title('Number of YouTube Channel Type in Indonesia')
plt.show()

## Analisa rata-rata viewer per kategori video (di Indonesia)
indo_list = df_indo.groupby('channel_type')['rate_viewers'].mean().sort_values(ascending=True)
indo_list

indo_list.plot(x='channel_type', y='rate_viewers', kind='barh')
plt.show()

top_indo = df_indo.groupby(['title', 'channel_type'])['rate_viewers'].sum().sort_values(ascending=True)
top_indo

top10 = top_indo.tail(10)
top10

top10.plot(x='channel_type', y='video_views', kind='barh')
plt.show()

df_shows=df.query("title == 'deddycorbuzier'")
df_shows.head(10)

df_check=df_indo.query("category == 'Music'")
df_check.head(20)

df_indo['channel_type'].value_counts()

"""# World Section"""

df['channel_type'].nunique()

df['youtuber'].nunique()

df['channel_type'].unique()

df['channel_type'].value_counts()

fig, ax  = plt.subplots(figsize=(8,6))
ax=sns.countplot(y='channel_type', data=df, palette='viridis_r', order = df['channel_type'].value_counts().index)
ax.set_xticklabels(ax.get_xticklabels(), rotation=80)
ax.bar_label(ax.containers[0])
plt.title('Number of World YouTube Channel Type')
plt.show()

type_list = df.groupby('channel_type')['rate_viewers'].mean().sort_values(ascending=True)
type_list

type_list.plot(x='channel_type', y='rate_viewers', kind='barh')
plt.show()

df_shows=df.query("channel_type == 'People'")
df_shows.head(20)

"""# Most Country Per Category"""

df_entertainment=df.query("channel_type == 'Entertainment'")
df_entertainment.head()

ent_country = df_entertainment.groupby('country')['rate_viewers'].sum().sort_values(ascending=True)
ent_country

ent_country.plot(x='country', y='rate_viewers', kind='barh')
plt.show()

ent_country_mean = df_entertainment.groupby('country')['rate_viewers'].mean().sort_values(ascending=True)
ent_country_mean

ent_country_mean.plot(x='country', y='rate_viewers', kind='barh')
plt.show()

ent_country_you = df_entertainment.groupby('channel_type')['country'].value_counts()
ent_country_you

